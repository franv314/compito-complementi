import Mathlib.Analysis.SpecialFunctions.Trigonometric.ArctanDeriv
import Mathlib.Topology.MetricSpace.UniformConvergence

open Filter
open Topology

def prop‚ÇÅ {E : Type} [MetricSpace E] (f‚Çï : ‚Ñï ‚Üí E ‚Üí ‚Ñù) (f : E ‚Üí ‚Ñù) :=
  TendstoUniformly f‚Çï f atTop

def prop‚ÇÇ {E : Type} [MetricSpace E] (f‚Çï : ‚Ñï ‚Üí E ‚Üí ‚Ñù) (f : E ‚Üí ‚Ñù) :=
  ‚àÄ e : ‚Ñï ‚Üí E, (‚àÉ ‚Ñì, Tendsto e atTop (ùìù ‚Ñì)) ‚Üí Tendsto (Œª n => f‚Çï n (e n) - f (e n)) atTop (ùìù 0)

def prop‚ÇÉ {E : Type} [MetricSpace E] (f‚Çï : ‚Ñï ‚Üí E ‚Üí ‚Ñù) (f : E ‚Üí ‚Ñù) :=
  ‚àÄ x, Tendsto (f‚Çï ¬∑ x) atTop (ùìù (f x))

section proofs

variable {E : Type} [MetricSpace E]
variable (f‚Çï : ‚Ñï ‚Üí E ‚Üí ‚Ñù) (f : E ‚Üí ‚Ñù)
variable (hf‚Çï : ‚àÄ n, Continuous (f‚Çï n)) (hf : Continuous f)

-- Exercise 2.A (i ‚Üí ii)
theorem prop‚ÇÇ_of_prop‚ÇÅ (h : prop‚ÇÅ f‚Çï f) : prop‚ÇÇ f‚Çï f := by
  intro e _
  rw [Metric.tendsto_nhds]
  intro Œµ hŒµ
  have h := Metric.tendstoUniformly_iff.mp h Œµ hŒµ
  simp_all only [dist, eventually_atTop, sub_zero]
  have ‚ü®m, hm‚ü© := h
  use m
  conv at hm in |_| => rw [abs_sub_comm]
  exact Œª n hn => hm n hn (e n)

-- Exercise 2.A (ii ‚Üí iii)
theorem prop‚ÇÉ_of_prop‚ÇÇ (h : prop‚ÇÇ f‚Çï f) : prop‚ÇÉ f‚Çï f := by
  intro e
  have ‚Ñì‚ÇÅ := h (Œª _ => e) (by simp)
  have ‚Ñì‚ÇÇ : Tendsto (Œª _ : ‚Ñï => f e) atTop (ùìù (f e)) := by simp
  have := Tendsto.add ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ
  simp_all

-- Exercise 2.C (iii ‚àß equicontinuity ‚Üí ii)
include hf
theorem prop‚ÇÇ_of_prop‚ÇÉ_of_equicontinuity (h‚ÇÅ : prop‚ÇÉ f‚Çï f) (h‚ÇÇ : Equicontinuous f‚Çï) : prop‚ÇÇ f‚Çï f := by
  intro e ‚ü®‚Ñì, he‚ü©
  rw [Metric.tendsto_nhds]
  rw [Metric.tendsto_nhds] at he
  intro Œµ hŒµ
  have ‚ü®Œ¥‚ÇÅ, hŒ¥‚ÇÅ‚ü© := Metric.equicontinuousAt_iff.mp (h‚ÇÇ ‚Ñì) (Œµ / 3) (by linarith)
  have has_lim := Metric.tendsto_nhds.mp (h‚ÇÅ ‚Ñì) (Œµ / 3) (by linarith)
  have ‚ü®Œ¥‚ÇÇ, hŒ¥‚ÇÇ‚ü© := (Metric.continuous_iff.mp hf) ‚Ñì (Œµ / 3) (by linarith)
  simp_all only [dist, sub_zero, eventually_atTop]
  have ‚ü®m‚ÇÅ, hm‚ÇÅ‚ü© := has_lim
  have ‚ü®m‚ÇÇ, hm‚ÇÇ‚ü© := he (min Œ¥‚ÇÅ Œ¥‚ÇÇ) (by simp_all)
  use max m‚ÇÅ m‚ÇÇ
  intro b hb
  calc
    _ ‚â§ |f‚Çï b (e b) - f‚Çï b ‚Ñì| + |f‚Çï b ‚Ñì - f ‚Ñì| + |f ‚Ñì - f (e b)| := by
      have := dist_triangle4 (f‚Çï b (e b)) (f‚Çï b ‚Ñì) (f ‚Ñì) (f (e b))
      simp_all [dist]
    _ < (Œµ / 3) + (Œµ / 3) + (Œµ / 3) := by
      gcongr
      . rw [abs_sub_comm]
        exact hŒ¥‚ÇÅ.right (e b) (by simp_all) b
      . exact hm‚ÇÅ b (by simp_all)
      . rw [abs_sub_comm]
        exact hŒ¥‚ÇÇ.right (e b) (by simp_all)
    _ = Œµ := by ring

-- Exercise 2.C (ii ‚àß compact domain ‚Üí i)
omit hf
theorem prop‚ÇÅ_of_prop‚ÇÇ_of_compact_domain (h‚ÇÅ : prop‚ÇÇ f‚Çï f) [CompactSpace E] : prop‚ÇÅ f‚Çï f := by
  by_contra abs
  rw [prop‚ÇÅ, Metric.tendstoUniformly_iff, not_forall] at abs
  have ‚ü®Œµ, hŒµ‚ü© := abs
  simp only [eventually_atTop, Classical.not_imp, not_exists, not_forall, not_lt] at hŒµ
  have ‚ü®g', hg'‚ü© := Classical.skolem.mp hŒµ.right
  let g : ‚Ñï ‚Üí ‚Ñï := Nat.rec (g' 0) (Œª _ i => g' (i + 1))
  have hg : ‚àÄ n, ‚àÉ x_1, Œµ ‚â§ dist (f x_1) (f‚Çï (g n) x_1) := by
    intro n
    induction n
    repeat exact (hg' _).right
  have hmg : StrictMono g := by
    apply strictMono_nat_of_lt_succ
    intro n
    induction n
    repeat
      simp_all only [g]
      exact lt_of_lt_of_le (by simp) (hg' _).left
  have ‚ü®z, hz‚ü© := Classical.skolem.mp hg
  simp only [dist] at hz
  have ‚ü®‚Ñì, h‚Ñì, œÜ, hœÜ‚ü© := IsCompact.isSeqCompact (X := E) CompactSpace.isCompact_univ (Œª n => (by simp_all : z n ‚àà Set.univ))
  have hig := hmg.injective
  have hiœÜ := hœÜ.left.injective
  have (k : ‚Ñï) := Classical.dec (‚àÉ i, k = (g (œÜ i)))
  let x := Œª k => dite (‚àÉ i, k = (g (œÜ i))) (Œª h => z (œÜ h.choose)) (Œª _ => ‚Ñì)
  have : Tendsto x atTop (ùìù ‚Ñì) := by
    rw [Metric.tendsto_nhds]
    intro Œµ hŒµ
    rw [eventually_atTop]
    have ‚ü®m, hm‚ü© := eventually_atTop.mp (Metric.tendsto_nhds.mp hœÜ.right Œµ hŒµ)
    use g (œÜ m)
    intro b hb
    simp only [x]
    split_ifs with h
    . apply hm _
      exact hœÜ.left.le_iff_le.mp (hmg.le_iff_le.mp (le_of_le_of_eq hb h.choose_spec))
    . simp_all
  have ‚ü®m, hm‚ü© := eventually_atTop.mp (Metric.tendsto_nhds.mp (h‚ÇÅ x ‚ü®‚Ñì, this‚ü©) Œµ hŒµ.left)
  have hm := Œª i => hm (g (œÜ i))
  simp only [dist, sub_zero, x] at hm
  have eq (i : ‚Ñï) : dite (‚àÉ i‚ÇÅ, (g (œÜ i)) = (g (œÜ i‚ÇÅ))) (Œª h => z (œÜ h.choose)) (Œª _ => ‚Ñì) = z (œÜ i) := by
    split_ifs with h
    . rw [‚Üêhig (congrArg g (hiœÜ (hig h.choose_spec)))]
    . exact (h ‚ü®i, rfl‚ü©).elim
  repeat conv at hm in (dite _ _ _) => rw [eq]
  have small_abs := hm m (le_trans hœÜ.left.le_apply hmg.le_apply)
  have big_abs := (hz (œÜ m))
  rw [abs_sub_comm] at big_abs
  linarith

end proofs

section counterexamples

-- Exercise 2.B ¬¨(iii ‚Üí ii)
theorem not_prop‚ÇÇ_of_prop‚ÇÉ :
    ¬¨(
      ‚àÄ (E : Type) [MetricSpace E] (f‚Çï : ‚Ñï ‚Üí E ‚Üí ‚Ñù) (f : E ‚Üí ‚Ñù),
      (prop‚ÇÉ f‚Çï f) ‚àß (‚àÄ n, Continuous (f‚Çï n)) ‚àß (Continuous f)
      ‚Üí prop‚ÇÇ f‚Çï f
    ) := by
  let g := Œª x => x * (Real.exp (-x))
  let h := Œª n => (n * ¬∑ : NNReal ‚Üí ‚Ñù)
  rw [not_forall]; use NNReal
  rw [not_forall]; use instMetricSpaceNNReal
  rw [not_forall]; use (Œª n => g ‚àò h n)
  rw [not_forall]; use (Œª x => 0)
  simp only [and_imp, Classical.not_imp]
  refine ‚ü®?_, ?_, continuous_const, ?_‚ü©
  . intro x
    cases em (x = 0) with
    | inl zero => simp_all [g, h]
    | inr nonzero =>
      simp only [Function.comp_apply]
      have gt_zero : 0 < x.val := by
        refine lt_of_le_of_ne x.prop ?_
        have th := Subtype.coe_ne_coe.mpr nonzero
        norm_cast at th
        rw [‚Üêne_eq] at th
        exact th.symm
      have ‚Ñì‚ÇÅ : Tendsto (Œª (n : ‚Ñï) => h n x) atTop atTop := by
        simp only [h]
        exact tendsto_atTop_atTop_of_monotone
          (Œª i j ihj => (mul_le_mul_iff_of_pos_right gt_zero).mpr (by norm_cast))
          (Œª b => ‚ü®‚åàb / x‚åâ‚Çä, (div_le_iff‚ÇÄ gt_zero).mp (Nat.le_ceil _)‚ü©)
      have ‚Ñì‚ÇÇ : Tendsto g atTop (ùìù 0) := by
        have := Real.tendsto_pow_mul_exp_neg_atTop_nhds_zero 1
        simp_all [g]
      exact Tendsto.comp ‚Ñì‚ÇÇ ‚Ñì‚ÇÅ
  . intro n
    simp only [g, h]
    exact Continuous.comp
      (Continuous.mul continuous_id (Continuous.rexp continuous_neg))
      (Continuous.mul continuous_const NNReal.continuous_coe)
  . rw [prop‚ÇÇ, not_forall]
    use (1 / ¬∑)
    rw [Classical.not_imp]
    constructor
    . exact ‚ü®0, NNReal.tendsto_const_div_atTop_nhds_zero_nat _‚ü©
    . rw [Metric.tendsto_nhds, not_forall]
      use 1 / Real.exp 1
      rw [Classical.not_imp, eventually_atTop, not_exists]
      refine ‚ü®one_div_pos.mpr (Real.exp_pos 1), ?_‚ü©
      intro n
      rw [not_forall]
      use max 1 n
      rw [Classical.not_imp]
      refine ‚ü®by simp_all, ?_‚ü©
      have : max 1 (n : ‚Ñù) ‚â† 0 := by norm_cast; simp_all
      simp_all [g, h, Real.exp_neg]

-- Exercise 2.B ¬¨(ii ‚Üí i)
theorem not_prop‚ÇÅ_of_prop‚ÇÇ :
    ¬¨(
      ‚àÄ (E : Type) [MetricSpace E] (f‚Çï : ‚Ñï ‚Üí E ‚Üí ‚Ñù) (f : E ‚Üí ‚Ñù),
      (prop‚ÇÇ f‚Çï f) ‚àß (‚àÄ n, Continuous (f‚Çï n)) ‚àß (Continuous f)
      ‚Üí prop‚ÇÅ f‚Çï f
    ) := by
  let g := Real.arctan
  let g' := Œª (x : ‚Ñù) => 1 / (1 + x ^ 2)
  let h := Œª (n : ‚Ñï) => (n + ¬∑ : ‚Ñù ‚Üí ‚Ñù)
  have hh (i : ‚Ñï) : Differentiable ‚Ñù (h i) := (Differentiable.add (differentiable_const _) differentiable_id)
  have hh' (i : ‚Ñï) : deriv (h i) = Œª _ => 1 := calc
    _ = deriv ((Œª (_ : ‚Ñù) => (i : ‚Ñù)) + id) := congr_arg deriv (funext Œª _ => by simp_all [h])
    _ = deriv i + deriv id := funext Œª _ => deriv_add (differentiableAt_const _) (differentiableAt_id)
    _ = _ := funext Œª _ => by simp_all
  rw [not_forall]; use ‚Ñù
  rw [not_forall]; use Real.metricSpace
  rw [not_forall]; use (Œª n => g ‚àò h n)
  rw [not_forall]; use (Œª x => Real.pi / 2)
  simp only [and_imp, Classical.not_imp]
  refine ‚ü®?_, ?_, continuous_const, ?_‚ü©
  . have eq_lip (i : ‚Ñï) := lipschitzWith_of_nnnorm_deriv_le (C := 1) (f := g ‚àò h i)
      (Differentiable.arctan (hh _))
      Œª x => Subtype.coe_le_coe.mp <| by
        have : |1 + (i + x) ^ 2|‚Åª¬π ‚â§ 1 := by
          apply inv_le_one_of_one_le‚ÇÄ
          have diseq : 1 ‚â§ 1 + (i + x) ^ 2 := by simp_all [sq_nonneg]
          rwa [abs_of_nonneg (le_trans zero_le_one diseq)]
        have : deriv (Real.arctan ‚àò fun x ‚Ü¶ ‚Üëi + x) x = _ := deriv_arctan (hh i x)
        simp_all [g, h]
    have eq_cont := (LipschitzWith.uniformEquicontinuous (g ‚àò h ¬∑) 1 eq_lip).equicontinuous
    have : prop‚ÇÉ (Œª n => g ‚àò h n) (Œª x => Real.pi / 2) := by
      intro x
      have ‚Ñì‚ÇÅ : Tendsto (Œª (n : ‚Ñï) => h n x) atTop atTop := by
        simp only [h]
        exact tendsto_atTop_atTop_of_monotone
          (Œª _ _ _ => by simp_all)
          (Œª b => ‚ü®‚åàb - x‚åâ‚Çä, tsub_le_iff_right.mp (Nat.le_ceil _)‚ü©)
      have ‚Ñì‚ÇÇ : Tendsto g atTop (ùìù (Real.pi / 2)) := by
        have : Tendsto Real.arctan atTop (ùìù (Real.pi / 2)) := Real.tendsto_arctan_atTop.mono_right nhdsWithin_le_nhds
        simp_all [g]
      exact Tendsto.comp ‚Ñì‚ÇÇ ‚Ñì‚ÇÅ
    exact prop‚ÇÇ_of_prop‚ÇÉ_of_equicontinuity (Œª n => g ‚àò h n) (Œª x => Real.pi / 2) continuous_const this eq_cont
  . intro n
    simp only [g, h]
    exact Continuous.comp Real.continuous_arctan (Continuous.add continuous_const continuous_id)
  . rw [prop‚ÇÅ, Metric.tendstoUniformly_iff, not_forall]
    use Real.pi / 2
    rw [Classical.not_imp, eventually_atTop, not_exists]
    refine ‚ü®Real.pi_div_two_pos, ?_‚ü©
    intro b
    rw [not_forall]
    use b
    rw [Classical.not_imp]
    simp_all only [le_refl, Function.comp_apply, not_forall, not_lt, true_and, g, h]
    use -b
    simp [abs_of_nonneg Real.pi_nonneg]

end counterexamples
